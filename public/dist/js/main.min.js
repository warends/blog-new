angular.module('willsBlog', ['ngResource', 'ngAnimate', 'ngSanitize', 'ui.router', 'duScroll', 'gist']);

angular.module('willsBlog').config(['$locationProvider', '$stateProvider', '$urlRouterProvider', function($locationProvider, $stateProvider, $urlRouterProvider){

    var routeRoleChecks = {
      admin: function(mvAuth){
          return mvAuth.authorizeCurrentUserForRoute('admin');
      },
      user: function(mvAuth){
          return mvAuth.authorizeAutheticatedUserForRoute();
      }
    }

    $urlRouterProvider.otherwise('/');

    $locationProvider.html5Mode(true);

    $stateProvider
    .state('home', {
      url: '/',
      templateUrl: '/partials/main/main',
      controller: 'mainCtrl'
    })
    .state('account', {
      url: '/account',
      templateUrl: '/partials/login/login',
      controller: 'loginCtrl'
    })
    .state('signup', {
      url: '/signup',
      templateUrl: '/partials/login/signup',
      controller: 'signupCtrl'
    })
    .state('posts', {
      url: '/posts',
      templateUrl: '/partials/blog/blog-list',
      controller: 'blogListCtrl'
    })
    .state('profile', {
      url: '/profile',
      templateUrl: '/partials/admin/profile',
      controller: 'profileCtrl',
      resolve: {
        routeRoleCheck: ['mvAuth', function(mvAuth){
            return mvAuth.authorizeAutheticatedUserForRoute();
        }
      ]}
    })
    .state('postDetail', {
      url: '/posts/:slug',
      templateUrl: '/partials/blog/post-detail',
      controller: 'postDetailCtrl'
    })
    .state('newPost', {
      url: '/admin/new-post',
      templateUrl: '/partials/blog/new-post',
      controller: 'newPostCtrl',
      resolve: {
        routeRoleCheck: ['mvAuth', function(mvAuth){
            return mvAuth.authorizeCurrentUserForRoute('admin');
        }
      ]}
    })
    .state('editPost', {
      url: '/admin/:slug/edit',
      templateUrl: '/partials/blog/edit-post',
      controller: 'editPostCtrl',
      resolve: {
        routeRoleCheck: ['mvAuth', function(mvAuth){
            return mvAuth.authorizeCurrentUserForRoute('admin');
        }
      ]}
    })
    .state('users', {
      url: '/admin/users',
      templateUrl: '/partials/admin/users-list',
      controller: 'userListCtrl',
      resolve: {
        routeRoleCheck: ['mvAuth', function(mvAuth){
            return mvAuth.authorizeCurrentUserForRoute('admin');
        }
      ]}
    });

}]);//end config


angular.module('willsBlog').run(['$rootScope', '$location', '$anchorScroll', function($rootScope, $location, $anchorScroll){

  $anchorScroll.yOffset = 60;

  $rootScope.$on('$routeChangeError', function(evt, current, previous, rejection) {
      if(rejection === 'not authorized') {
        $location.path('/');
      }
  });

  $rootScope.$on("$stateChangeSuccess", function (event, currentRoute, previousRoute) {
    window.scrollTo(0, 0);
  });

}]);

angular.module('willsBlog').controller('profileCtrl', ['$scope', 'mvAuth', 'identity', 'notifier', function($scope, mvAuth, identity, notifier){
  $scope.username = identity.currentUser.username;
  $scope.fName = identity.currentUser.firstName;
  $scope.lName = identity.currentUser.lastName;

  $scope.update = function(){
      var newUserData = {
        username: $scope.username,
        firstName: $scope.fName,
        lastName: $scope.lName
      }

      if($scope.password && $scope.password.length > 0) {
       newUserData.password = $scope.password;
      }

      mvAuth.updateCurrentUser(newUserData)
        .then(function(){
          notifier.notify('Your information has been updated');
        }, function(reason){
          notifier.error(reason);
        });
  }

}]);

angular.module('willsBlog').controller('userListCtrl', ['$scope', 'mvUser', function($scope, mvUser){
  $scope.users = mvUser.query();
}]);

angular.module('willsBlog').factory('identity', ['$window', 'mvUser', function($window, mvUser){

  var currentUser;
  if(!!$window.bootstrappedUserObject) {
    currentUser = new mvUser();
    angular.extend(currentUser, $window.bootstrappedUserObject);
  }
  return {
    currentUser: currentUser,
    isAuthenticated: function(){
      return !!this.currentUser;
    },

    isAuthorized: function(role){
      return !!this.currentUser && this.currentUser.roles.indexOf(role) > -1;
    }

  }

}]);

angular.module('willsBlog').controller('loginCtrl', ['$scope', '$http', 'identity', 'notifier', 'mvAuth', '$location', 'Meta', function($scope, $http, identity, notifier, mvAuth, $location, Meta){

    Meta.setTitle('Account');

    $scope.identity = identity;

    $scope.signIn = function(username, password){
      mvAuth.authenticateUser(username, password).then(function(success){
        if(success){
          notifier.notify('You have signed in');
          $location.url('/account');
          $scope.actShown = false;
        } else {
          notifier.error('Username/Password Incorrect');
        }
      });
    };

    $scope.signOut = function(){
      mvAuth.logoutUser().then(function() {
        $scope.username = '';
        $scope.password = '';
        notifier.notify('You have logged out');
        $location.path('/');
      });
    };

    $scope.signup = function(){
      var newUserData = {
        username: $scope.username,
        firstName: $scope.fName,
        lastName: $scope.lName,
        password: $scope.password
      };
      mvAuth.createUser(newUserData)
        .then(function(){
          notifier.notify('User account created');
          $location.path('/');
      }, function(message){
        notifier.error(message);
      });
    };

    $scope.cancel = function(){
      $location.path('/');
    };

    $scope.actShown = false;
    $scope.toggleAccount = function() {
      if(identity.isAuthenticated()){
        $location.path('/account');
      } else {
        $scope.actShown = !$scope.actShown;
      }
    };

    $scope.signupShown = false;
    $scope.toggleSignup = function() {
      $scope.signupShown = !$scope.signupShown;
    };


}]);


angular.module('willsBlog').factory('mvAuth', ['$http', 'identity', '$q', 'mvUser', function($http, identity, $q, mvUser){

  return {
    // this thing working
    authenticateUser: function(username, password){
      var deferred = $q.defer();

      $http.post('/login', {
        username: username,
        password: password
      }).then(function(response){
        if (response.data.success){

          var user = new mvUser();
          angular.extend(user, response.data.user);
          identity.currentUser = user;
          deferred.resolve(true);
        } else {
          deferred.resolve(false);
        }
      });

      return deferred.promise;
    },

    logoutUser: function() {
      var deferred = $q.defer();

      $http.post('/logout', {logout: true}).then(function(){
        identity.currentUser = undefined;
        deferred.resolve();
      });

      return deferred.promise;

    },

    authorizeCurrentUserForRoute: function(role){
      if (identity.isAuthorized('admin')){
        return true;
      } else {
        return $q.reject('not authorized');
      }
    },

    authorizeAutheticatedUserForRoute: function(){
      if (identity.isAuthenticated()){
        return true;
      } else {
        return $q.reject('not a current user');
      }
    },

    createUser : function(newUserData) {
       var newUser = new mvUser(newUserData);
       var deferred = $q.defer();

       newUser.$save().then(function(){
         identity.currentUser = newUser;
         deferred.resolve();
       }, function(response){
         deferred.reject(response.data.reason);
       });

       return deferred.promise;
    },

    updateCurrentUser: function(newUserData){
        var deferred = $q.defer();
        var clone = angular.copy(identity.currentUser);
        angular.extend(clone, newUserData);
        clone.$update().then(function(){
          identity.currentUser = clone;
          deferred.resolve();
        }, function(response){
          deferred.reject(response.data.reason);
        });
        return deferred.promise;
    }

  }// return

}]);

angular.module('willsBlog').factory('mvUser', ['$resource', function($resource){

  var UserResource = $resource('/api/users/:id', {_id : '@id'}, {
    update: {method: 'PUT', isArray: false}
  });

  UserResource.prototype.isAdmin = function(){
    return this.roles && this.roles.indexOf('admin') > -1;
  }

  return UserResource;

}]);

angular.module('willsBlog').controller('signupCtrl', ['$scope', 'mvAuth', 'notifier', '$location', function($scope, mvAuth, notifier, $location){
    $scope.signup = function(){

      var newUserData = {
        username: $scope.username,
        firstName: $scope.fName,
        lastName: $scope.lName,
        password: $scope.password
      };
      mvAuth.createUser(newUserData)
        .then(function(){
          notifier.notify('User account created');
          $location.path('/');
      }, function(reason){
        notifier.error(reason);
      });

    };

    $scope.cancel = function(){
      $location.path('/');
    };

}]);

angular.module('willsBlog').controller('blogListCtrl', ['$scope', 'mvCachedPost', 'identity', '$location', 'Meta',  function($scope, mvCachedPost, identity, $location, Meta){

  Meta.setTitle('Blog');

  $scope.posts = mvCachedPost.query();

  $scope.identity = identity;

  $scope.sortOptions= [
    {value: 'published', text: 'Published Date'},
    {value: 'title', text: 'Sort by Title'}
  ]

  $scope.sortOrder = $scope.sortOptions[0].value;
}]);

angular.module('willsBlog').directive('commentForm', [function(){
  return{
    restrict: 'E',
    templateUrl: '/partials/blog/comment-form'
  }
}]);

angular.module('willsBlog').directive('commentList', [function(){
  return{
    restrict: 'E',
    templateUrl: '/partials/blog/comment-list'
  }
}]);

angular.module('willsBlog').service('CommentService', ['$http', 'notifier', function($http, notifier){

  this.postComment = function(data, slug){
    return $http.post('/api/posts/comments/' + slug, data)
      .success(function(response){
        notifier.notify('Thanks for submitting your comment ' + response.message);
      })
      .error(function(err){
        notifier.notify('There was a problem submitting your comment.');
      });
  }

  this.deleteComment = function(data, slug){
    return $http.put('/api/posts/comments/' + slug, data)
      .success(function(response){
        notifier.notify('Comment number ' + response.message + ' has been deleted!');
      })
      .error(function(err){
        notifier.notify('There was a problem deleting your comment.');
      });
  }

}]);

 angular.module('willsBlog').controller('editPostCtrl', [ '$scope','notifier','mvPost','$q','$location','$stateParams','$http','identity','CommentService', 'Meta', function($scope, notifier, mvPost, $q, $location, $stateParams, $http, identity, CommentService, Meta){

   Meta.setTitle('Edit Post');

    $scope.identity = identity;

    $scope.post = mvPost.get({ slug: $stateParams.slug }, function(){
      //$scope.gistList = $scope.post.gists;
    });

    $scope.addGist = function(newGist){
      $scope.post.gists.push(newGist);
    }

    $scope.removeGist = function(){
      $scope.post.gists.pop();
    }

    $scope.post.data = {
        _id: $scope.post._id,
        title : $scope.post.title,
        slug: $scope.post.slug,
        categories : $scope.post.categories,
        excerpt : $scope.post.excerpt,
        body : $scope.post.body,
        author: $scope.post.author,
        postedDate: Date.now(),
        gists: $scope.post.gists
    }

    $scope.updatePost = function(){
        $scope.post.$update( { slug: $scope.post.slug }, function(){
          notifier.notify('Post has been updated');
          $location.path('/posts');
        }, function(message){
          notifier.error(message.data);
        });
    }

    $scope.deletePost = function(){
      $scope.post.$delete(function() {
        notifier.notify('Post has been deleted');
        $location.path('/posts');
      });
    }

    $scope.deleteComment = function(comment){
      var slug = $stateParams.slug;
      CommentService.deleteComment(comment, slug);
    }

    $scope.cancel = function(){
      $location.path('/posts');
    }

}]);

angular.module('willsBlog').factory('mvCachedPost', ['mvPost', function(mvPost){
  var postList;

  return {
    query: function(){
      if(!postList){
        postList = mvPost.query();
      }
      return postList;
    }
  }

}]);

angular.module('willsBlog').factory('mvPost', ['$resource', function($resource){

  return $resource('/api/posts/:slug', {slug: '@slug'}, {
    update : {
      method: 'PUT'
    }
  }, {
    stripTrailingSlashes: false
  });

}]);

angular.module('willsBlog').controller('newPostCtrl', ['$scope', 'notifier', 'mvPost', '$location', function($scope, notifier, mvPost, $location){

  $scope.post = new mvPost();

  $scope.createNewPost = function(){
    $scope.post.$save(function(){
        notifier.notify('New Post Created');
        $location.path('/blog');
    });
  }

  $scope.post.gists = [];
  $scope.addGist = function(newGist){
    $scope.post.gists.push(newGist);
  }

  $scope.removeGist = function(newGist){
    $scope.post.gists.pop();
  }

  $scope.cancel = function(){
    $location.path('/blog');
  }

}]);

angular.module('willsBlog').controller('postDetailCtrl', ['$scope', 'mvCachedPost', 'mvPost', '$stateParams', 'Meta', 'notifier', 'CommentService', function($scope, mvCachedPost, mvPost, $stateParams, Meta, notifier, CommentService){

  mvCachedPost.query().$promise.then(function(collection){
    collection.forEach(function(post){
      if(post.slug === $stateParams.slug){
        $scope.post = post;
        var title = $scope.post.title,
            desc = $scope.post.excerpt;
        Meta.setTitle(title);
        Meta.setDesc(desc);
      }
    });
  });

  $scope.submitComment = function(){
    var comment = {
      'content': $scope.comment.content,
      'date': Date.now(),
      'firstName': $scope.comment.firstName,
      'lastName': $scope.comment.lastName,
    };

    var slug = $stateParams.slug;
    CommentService.postComment(comment, slug)
      .then(function(){
        $scope.post.comments.push(comment);
        $scope.comment.content= "";
        $scope.comment.firstName= "";
        $scope.comment.lastName= "";
      }, function(){
      });
  };

}]);

angular.module('willsBlog').controller('carouselCtrl', ['$scope', function($scope){
  $scope.slides = [
    { name: 'Mobile',
    svg: 'mobile-svg',
    desc: 'Is your website up to date with the most current mobile design trends? If not, you are loosing valuable business. Ensure that your customers can reach your business from anywhere and receive the best user experience. By building with responsive design in mind, your customers will get a pixel perfect look from mobile to tablet or desktop.' },

    { name: 'ECommerce',
    svg: 'ecomm-svg',
    desc: 'Do you have a new product you are looking to bring to market and need an e-commerce site or just looking for more modern feel to an existing site?  By utilizing robust ecommerce platforms, I can design and develop a site that will scale with your business and needs all in time to meet your busy deadlines. ' },

    { name: 'SEO',
    svg: 'seo-svg',
    desc: 'Having a modern design and user friendly website is great, but if customers can`t find your business, it wont matter much.  I design and develop every aspect of the website with search engine optimization in mind and so your customers can find you among the competition.  Also through research and analytics I can develop, plan and deploy the best SEO and marketing practices to increase conversions and retention.' }
  ];

  $scope.currentIndex = 0;
  $scope.setCurrentSlideIndex = function(index){
    $scope.currentIndex = index;
  }
  $scope.isCurrentSlideIndex = function(index){
    return $scope.currentIndex === index;
  }
}])

.animation('.slide-animation', function(){
  return {
    addClass: function(element, className, done){
      if (className == 'ng-hide'){
          TweenMax.to(element, 0.5, {left: -element.parent().width(), onComplete: done });
      } else {
        done();
      }
    },
    removeClass: function(element, className, done){
      if(className == 'ng-hide'){
        element.removeClass('ng-hide');
        TweenMax.set(element, { left: element.parent().width() });
        TweenMax.to(element, 0.5, {left: 0, onComplete: done });
      } else {
        done();
      }
    }
  }
});

angular.module('willsBlog').controller('mainCtrl', ['$scope', '$location', 'mvCachedPost', 'notifier' ,'TwitterService', '$http', 'Meta',  function($scope, $location, mvCachedPost, notifier, TwitterService, $http, Meta){


  var $bgobj = $('#home');
  $(window).scroll(function() {
      var yPos = -( $(window).scrollTop() / $bgobj.data('speed'));
      var coords = '50% '+ yPos + 'px';
      $bgobj.css({ backgroundPosition: coords });
  });

  Meta.setTitle('Home');
  Meta.setDesc('I enjoy all things web development and am always actively learning the newest techniques and langauges. If you have a web design or development project, give me a shout, I would love to talk about it.');

  $scope.services = [
    { name: 'Development',
    svg: 'dev-logo',
    description: 'Customized and reusable code using the most up to date HTML5, CSS3 and Javascript framworks. Options range from static sites, content managed sites, and ecommerce stores.',
    more: 'Development Skills include HTML5, CSS, Javascript, Angular, Backbone, Node, Express, Boostrap and more.' },

    { name: 'Web Design',
    svg: 'design-logo',
    description: 'Creating an excellent user experience through clean, simple and thoroughly crafted design. Collaboration with clients during design process ensures a superb finished project.',
    more: 'Services include wire frames, photoshop mockups, logo design, and company branding.' },

    { name: 'Support',
    svg: 'sup-logo',
    description: 'Support is readily available for clients when anything comes up along the development process. Also available are personal instruction on how to maintain or update your own site.',
    more: 'Have a new product or feature you want to implement? Plans for continued support and maintenance are available.' }

  ];

  $scope.posts = mvCachedPost.query();

  $scope.form = {};

  $scope.sendMail = function(){
    var data =({
      contactName : this.contactName,
      contactCompany : this.contactCompany,
      contactEmail : this.contactEmail,
      contactMessage : this.contactMessage
    });

    $http.post('/contact-form', data)
      .success(function(data, status, headers, config){
        notifier.notify('Thank you for your message ' + data.contactName);
           $scope.form.contactForm.$setPristine();
           $scope.form.contactForm.$setUntouched();
      })
      .error(function(data, status, headers, config){
        notifier.notify('There was an error processing your request. Please try again');
      });
      this.contactName = null;
      this.contactCompany = null;
      this.contactEmail = null;
      this.contactMessage = null;

  }

  $scope.getUser = function(username){
		TwitterService.getUser(username)
		    .then(function(data){
		        $scope.twitterErrors = undefined;
	        	$scope.tweets = JSON.parse(data.result.userData);
						// console.log($scope.tweets);
		    })
		    .catch(function(error){
		        console.error('there was an error retrieving data: ', error);
		        $scope.twitterErrors = error.error;
		    })
	};

  //$scope.getUser();

}]);

angular.module('willsBlog').controller('navCtrl', ['$scope', '$location', '$document', function($scope, $location, $document){
  $scope.showMenu = function(){
      angular.element(document.getElementsByClassName('collapse')).toggleClass('in');
  };

  $scope.scrollTop = function(){
    $document.scrollTopAnimated(0);
  };

  $scope.linkTo = function(id){

      var route = $location.url();
      var offset = 60;
      var duration = 800;
      var element = angular.element(document.getElementById(id));

      if(route !== '/'){
        $location.url('/', function(){
          $document.scrollToElement(element, offset, duration);
        });

      } else {
        $document.scrollToElement(element, offset, duration);
      }
    };

}]);

angular.module('willsBlog').controller('workCtrl', ['$scope', function($scope){

  $scope.projects = [
    {
      name: 'Tendril Inc.',
      link: 'https://www.tendrilinc.com',
      clickFunc: toggleTendril = function(){
        this.modal = !this.modal;
      },
      backgroundImg: 'img/gallery/tendril.jpg',
      modal: false,
      modalImg: 'img/gallery/tendril-mockup.png',
      noLink: false
    },
    {
      name: 'Crown Offroad',
      link: 'http://crownoffroad.com',
      clickFunc: toggleCrown = function() {
        this.modal = !this.modal;
      },
      backgroundImg: 'img/gallery/crown-offroad.jpg',
      modal: false,
      modalImg: 'img/gallery/crown-offroad-mockup.png',
      noLink: false
    },
    {
      name: 'Colorado Broadband Portal',
      link: 'http://broadband.co.gov',
      clickFunc: $scope.toggleBroad = function() {
        this.modal = !this.modal;
      },
      backgroundImg: 'img/gallery/wires.jpg',
      modal: false,
      modalImg: 'img/gallery/broadband.png',
      noLink: false
    },
    {
      name: 'adidas adiPlayer',
      link: '',
      clickFunc: toggleAdi = function() {
        this.modal = !this.modal;
      },
      backgroundImg: 'img/gallery/adiplayer.jpg',
      modal: false,
      modalImg: 'img/gallery/adiplayer_mockup.png',
      noLink: true
    }
  ]

}]);

angular.module('willsBlog').factory('Meta', function(){
  var title = 'Web Development, Seattle, WA';
  var desc = 'I enjoy all things web development and am always actively learning the newest techniques and langauges. If you have a web design or development project, give me a shout, I would love to talk about it.';
  return {
    title: function() {return title;},
    setTitle: function(newTitle) { title = newTitle },
    description: function() { return desc;},
    setDesc : function(newDesc) { desc = newDesc}
  }
})
.controller('metaCtrl', ['$scope', 'Meta', function($scope, Meta){
  $scope.Meta = Meta;
  $scope.metaDesc = Meta;
}]);

angular.module('willsBlog').directive('globalModal', function(){
  return{
    restrict: 'E',
    scope: {
      show: '='
    },
    replace: true,
    transclude: true,
    link : function(scope, element, attrs){
      scope.dialogStyle = {};
      if(attrs.width)
        scope.dialogStyle.width = attrs.width;
      if (attrs.height)
        scope.dialogStyle.height = attrs.height;

      scope.hideModal = function(){
        scope.show = false;
      };
    },
    templateUrl: '/partials/common/modal'
  }
});

angular.module('willsBlog').value('notific8', notific8);

angular.module('willsBlog').factory('notifier', ['notific8', function(notific8){

  notific8('configure', {
    life: 3000,
    theme: 'atomic',
    zindex: 9999,
    verticalEdge: 'right',
    horizontalEdge: 'top',
    closeText: 'X'
  });

  return {
    notify: function(message){
      notific8(message, {color: 'pear'});
      console.log(message);
    },
    error: function(message){
      notific8(message, {color: 'tomato'});
      console.log(message);
    }
  }
}]);

angular.module('willsBlog').factory('TwitterService', ['$http', '$q', function($http, $q){

  var getUser = function(username){
    var d = $q.defer();

    $http.post('/twitter/user', {username : username})
      .success(function(data){
        return d.resolve(data);
      })
      .error(function(error){
        return d.reject(error);
      });
      return d.promise;
    };

    return {
      getUser : getUser
    }
}]);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
